name: Deploy to AWS Elastic Beanstalk
'on':
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: '${{ secrets.AWS_REGION }}'
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          Username: '${{ secrets.DOCKER_USERNAME}}'
          password: '${{ secrets.DOCKER_PASSWORD }}'
      - name: 'Build, tag, and push image to Docker Hub'
        run: >
          IMAGE_TAG=${{ github.sha }}

          docker build -t ${{ secrets.DOCKER_USERNAME
          }}/my-docker-repo:$IMAGE_TAG .

          docker push ${{ secrets.DOCKER_USERNAME }}/my-docker-repo:$IMAGE_TAG
      - name: Prepare the Dockerrun.aws.json
        run: >
          echo '{

          "AWSEBDockerrunVersion": 2,

          "containerDefinitions": [

          {
             "Name": "${{ secrets.DOCKER_USERNAME }}/my-docker-repo:${{ github.sha }}",
             "Update": "true"
             "essential": true,
             "memory": 128,
            "environment": [
              {"name": "TZ", "value": "${TZ}"},
              {"name": "NODE_ENV", "value": "development"},
              {"name": "WAIT_HOSTS", "value": "express-typescript-skeleton-postgres:5432"}
          ],

          "portMappings": [
            {"hostPort": "${EXTERNAL_PORT}", "containerPort": "${PORT}"}
          ],

          "mountPoints": [
            {"sourceVolume": "logs", "containerPath": "/app/logs"},
            {"sourceVolume": "app", "containerPath": "/app"}
          ]

          },

          {

          "name": "express-typescript-skeleton-postgres",

          "image": "postgres:16",

          "essential": false,

          "memory": 128,

          "environment": [
            {"name": "POSTGRES_USER", "value": "${DB_USER}"},
            {"name": "POSTGRES_PASSWORD", "value": "${DB_PASSWORD}"},
            {"name": "POSTGRES_DB", "value": "${DB_NAME}"},
            {"name": "TZ", "value": "${TZ}"}
          ],

          "mountPoints": [
            {"sourceVolume": "postgresdb", "containerPath": "/var/lib/postgresql/data"}
          ],

          "portMappings": [
            {"hostPort": "${DB_PORT}", "containerPort": 5432}
          ]

          },

          {

          "name": "express-typescript-skeleton-redis",

          "image": "redis:7",

          "essential": false,

          "memory": 128,

          "command": ["/bin/sh", "-c", "redis-server --appendonly yes
          --requirepass ${CACHE_PASSWORD}"],

          "environment": [
            {"name": "TZ", "value": "${TZ}"}
          ],

          "mountPoints": [
            {"sourceVolume": "redisdata", "containerPath": "/data"}
          ],

          "portMappings": [
            {"hostPort": "${CACHE_PORT}", "containerPort": 6379}
          ]

          }

          ],

          "volumes": [

          {
            "name": "logs",
          "host": {
            "sourcePath": "/var/app/current/logs"
          }

          },

          {
            "name": "app",
            "host": {
            "sourcePath": "/var/app/current/"
          }

          },

          {

          "name": "postgresdb",

          "host": {
            "sourcePath": "${DB_VOLUME}"
          }

          },

          {

          "name": "redisdata",
            "host": {
            "sourcePath": "${CACHE_VOLUME}"
          }

          }

          ]

          }

          ' > Dockerrun.aws.json
      - name: Zip deployment package
        run: zip deployment-package.zip Dockerrun.aws.json
      - name: Upload deployment package to S3
        run: >-
          aws s3 cp deployment-package.zip s3://risevest-bucket/${{ github.sha
          }}.zip
      - name: Deploy to Elastic Beanstalk
        run: >
          aws elasticbeanstalk create-application-version --application-name
          risevest-api --version-label ${{ github.sha }} --source-bundle
          S3Bucket=risevest-bucket,S3Key=${{ github.sha }}.zip

          aws elasticbeanstalk update-environment --environment-name
          Risevest-api-env --version-label ${{ github.sha }}
